# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QGraphicsScene, QFileDialog, QScrollArea,QDesktopWidget, QFileDialog, QFontDialog,
                             QGraphicsDropShadowEffect, QLabel, QMainWindow,
                             QMenu, QMessageBox, QShortcut, QSystemTrayIcon,
                             QToolBar, QWidget)
from PyQt5.QtGui import  QPixmap
import qdarkstyle


import os
import sys
import time 

############################ Main Program ######################

from language_tone import *
from nltk.classify import textcat 
#from Main import *

# Lang as dict

line = {'hi':'Hindi','hif':'Fiji Hindi','ru':'Russian','abk':'Abkhazian','epo':'Esperanto',
'spa':'Spanish','osp':'Old Spanish','ko':'Korean', 'ar':'Arabic','zh':'Chinese (Simplified)','cnr':'Montenegrin [2]'
,'urd':'Urdu','zh-TW':'Chinese (Traditional)'  , 'ne':'Nepali','gu':'Gujarati','ta':'Tamil','he':'Hebrew','te':'Telugu','en':'English'}

# Text = input(str("Enter the Text: "))


# classifier = textcat.TextCat()

# distances = classifier.lang_dists(Text)
# # #print(input_text)    
# ans = classifier.guess_language(Text)


# Goslate Language Detector

# gs = goslate.Goslate()
# lan_id = gs.detect(Text)









# language = lang_identifier(Text)

# txt =  '(ISO639-3) Code: ' + language
# res = " ".join(line.get(ele, ele) for ele in txt.split())
# # print("Detected Language: ",gs.get_languages()[lan_id], res)
# print(res,ans)

# # print("Detected Language Code:", language )

# model = language + '-en'


# if language == 'en':
#     tone = tone_analyzer(Text)

#     print("Tone Analysis is:", tone)
    
# else:
#     translation = lang_translator(Text,model)

#     tone = tone_analyzer(translation)

#     print("Tone Analysis is:", tone)


def listToString(s):  
    
    # initialize an empty string 
    str1 = " " 
    
    # return string   
    return (str1.join(s)) 

##########################################################################


class Ui_main_ui(object):
    def setupUi(self, main_ui):
        main_ui.setObjectName("Dashboard")
        main_ui.resize(800, 705)
        main_ui.setMaximumSize(QtCore.QSize(900, 800))
        main_ui.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(42, 44, 111, 255), stop:0.521368 rgba(28, 29, 73, 255));\n"
"border-radius: 10px;")
        self.frame = QtWidgets.QFrame(main_ui)
        #self.setWindowIcon(QIcon('Assestnew/logo.jpg'))
        
        self.frame.setGeometry(QtCore.QRect(220, 390, 120, 80))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.tabWidget = QtWidgets.QTabWidget(main_ui)
        self.tabWidget.setGeometry(QtCore.QRect(0, 240, 901, 481))
        # self.setWindowFlag(Qt.FramelessWindowHint)
        # flag = QtCore.Qt.WindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
        # self.setWindowFlags(flag)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Book")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("QTabWidget {\n"
"  padding:2px;\n"
"background: rgb(0,170,0)/*(12, 27, 70)*/;\n"
"border-color:rgb(255, 255, 255)\n"

"}\n"
"QTabBar::tab:selected {\n"
"    background-color: rgb(12, 27, 70);\n"
"    color:rgb(241, 244, 244);\n"
"\n"
 "}\n"
 "QTabBar::tab {\n"
"    background-color: rgb(244,245,239);\n"
"    color:rgb(12,27,70);\n"
"\n"
 "}\n"

# "\n"
# "\n"
# "QTabWidget QWidget {\n"
# "  /* Fixes #189 */\n"
# "  border-radius: 4px;\n"
# "}\n"
# "\n"
# "QTabWidget::pane {\n"
# "  border: 1px solid #32414B;\n"
# "  border-radius: 4px;\n"
# "  margin: 0px;\n"
# "  /* Fixes double border inside pane with pyqt5 */\n"
# "  padding: 0px;\n"
# "}\n"
# "\n"
# "QTabWidget::pane:selected {\n"
# "  background-color: #32414B;\n"
# "  border: 1px solid #1464A0;\n"
# " boder-radius: 4px;\n""}"
)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.label_9 = QtWidgets.QLabel(self.tab_7)
        self.label_9.setGeometry(QtCore.QRect(180, 310, 211, 61))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(11)
        self.label_9.setFont(font)
        self.label_9.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label_9.setToolTipDuration(1)
        self.label_9.setAutoFillBackground(False)
        self.label_9.setStyleSheet("QLabel {\n"
" \n"
"  \n"
"  \n"
"  color: #F0F0F0;\n"
"}")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.tab_7)
        self.label_10.setGeometry(QtCore.QRect(360, 320, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Papyrus")
        font.setPointSize(12)
        font.setUnderline(False)
        self.label_10.setFont(font)
        self.label_10.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label_10.setStyleSheet("QLabel {\n"
"  background-color: #19232D;\n"
"  border: 0px solid #32414B;\n"
"  padding: 2px;\n"
"  margin: 0px;\n"
"  color: #F0F0F0;\n"
"}")
        self.label_10.setText("@tushar78, Vishal")
        self.label_10.setOpenExternalLinks(False)
        self.label_10.setObjectName("label_10")
        self.label_3 = QtWidgets.QLabel(self.tab_7)
        self.label_3.setGeometry(QtCore.QRect(0, -20, 801, 471))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("Assestnew/UniversityProjectabout.jpg"))
        self.label_3.setObjectName("label_3")
        self.tabWidget.addTab(self.tab_7, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(self.tab)
        self.plainTextEdit_3.setGeometry(QtCore.QRect(30, 30, 511, 231))
        self.plainTextEdit_3.setStyleSheet("QPlainTextEdit {\n"
"  background-color: #19232D;\n"
"  color: #F0F0F0;\n"
"  border-radius: 10px;\n"
"  border: 1px solid #32414B;\n"
"}\n"
"\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPlainTextEdit:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.plainTextEdit_3.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.pushButton_8 = QtWidgets.QPushButton(self.tab)
        self.pushButton_8.clicked.connect(self.detect_clicked)
        self.pushButton_8.setGeometry(QtCore.QRect(600, 100, 75, 23))
        self.pushButton_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_8.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_8.setObjectName("pushButton_8")
        self.lineEditResult = QtWidgets.QLineEdit(self.tab)
        self.lineEditResult.setGeometry(QtCore.QRect(30, 280, 511, 31))
        self.lineEditResult.setStyleSheet("QLineEdit{\n"
"border: 2px solid rgb(37,39,48);\n"
"border-radius: 20px;\n"
"color:#FFF;\n"
"background-color:rgb(34,36,44);}\n"
"\n"
"QLineEdit:focus{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:10px;\n"
"}")
        self.lineEditResult.setObjectName("lineEditResult")
        self.pushButton_10 = QtWidgets.QPushButton(self.tab)
        self.pushButton_10.clicked.connect(self.exit_clicked)
        self.pushButton_10.setGeometry(QtCore.QRect(600, 180, 75, 23))
        self.pushButton_10.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_10.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(255, 85, 127);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    background-color: rgb(255, 85, 127);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.tab)
        self.pushButton_11.setGeometry(QtCore.QRect(600, 140, 75, 23))
        self.pushButton_11.clicked.connect(self.clear_clicked)
        self.pushButton_11.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_11.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_11.setObjectName("pushButton_11")
        self.tabWidget.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.tab_3)
        self.plainTextEdit.setGeometry(QtCore.QRect(30, 10, 491, 181))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 35, 45))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.plainTextEdit.setPalette(palette)
        self.plainTextEdit.setStyleSheet("QPlainTextEdit {\n"
"  background-color: #19232D;\n"
"  color: #F0F0F0;\n"
"  border-radius: 10px;\n"
"  border: 1px solid #32414B;\n"
"}\n"
"\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPlainTextEdit:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.plainTextEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.pushButton_12 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_12.clicked.connect(self.clear_clicked2)
        self.pushButton_12.setGeometry(QtCore.QRect(160, 270, 75, 23))
        self.pushButton_12.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_12.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_13 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_13.setGeometry(QtCore.QRect(260, 270, 75, 23))
        self.pushButton_13.clicked.connect(self.exit_clicked)
        self.pushButton_13.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_13.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(255, 85, 127);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    background-color: rgb(255, 85, 127);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_9 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_9.setGeometry(QtCore.QRect(60, 270, 75, 23))
        self.pushButton_9.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_9.clicked.connect(self.analyze_clicked)
        self.pushButton_9.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_9.setObjectName("pushButton_9")
        self.textBrowser = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser.setGeometry(QtCore.QRect(40, 310, 411, 111))
        self.textBrowser.setStyleSheet("QTextBrowser {\n"
"  background-color: rgb(103, 103, 103);\n"
"  color: #F0F0F0;\n"
"  border-radius: 10px;\n"
"  border: 1px solid #32414B;\n"
"}\n"
"\n"
"QTextBrowser:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QTextBrowser:focus {\n"
"  border: 1px solid rgb(0, 170, 127);\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(self.tab_3)
        self.pushButton.setGeometry(QtCore.QRect(570, 90, 172, 41))
        self.pushButton.setStyleSheet("QPushButton{\n"
"    color: rgb(7, 20, 52);\n"
"/*color:rgb(255, 255, 255)*/;\n"
"background-color: rgb(255, 255, 255)/*rgb(231, 231, 231)*/;\n"
"}\n"
"\n"
"QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Asset/1924603.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_14 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_14.setGeometry(QtCore.QRect(560, 40, 75, 23))
        self.pushButton_14.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_14.clicked.connect(self.openFileNameDialog)
        self.pushButton_14.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_15.setGeometry(QtCore.QRect(650, 40, 75, 23))
        self.pushButton_15.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_15.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_15.setObjectName("pushButton_15")
        self.line = QtWidgets.QFrame(self.tab_3)
        self.line.setGeometry(QtCore.QRect(40, 260, 500, 3))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.progressBar_2 = QtWidgets.QProgressBar(self.tab_3)
        self.progressBar_2.setGeometry(QtCore.QRect(60, 220, 391, 23))
        self.progressBar_2.setStyleSheet("QProgressBar {\n"
"    \n"
"    background-color: rgb(98, 114, 164);\n"
"    color: rgb(200, 200, 200);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"QProgressBar::chunk{\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.511364, x2:1, y2:0.523, stop:0 rgba(254, 121, 199, 255), stop:1 rgba(170, 85, 255, 255));\n"
"}")
        self.progressBar_2.setProperty("value", 0)
        self.progressBar_2.setTextVisible(True)
        self.progressBar_2.setObjectName("progressBar_2")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.frame_2 = QtWidgets.QFrame(self.tab_2)
        self.frame_2.setGeometry(QtCore.QRect(10, 30, 781, 381))
        self.frame_2.setStyleSheet("QFrame {    \n"
"    border-color: rgb(16, 31, 64);\n"
"    /*background-color: rgb(56, 58, 89)*/;    \n"
"    color: rgb(220, 220, 220);\n"
"    border-radius: 10px;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_5 = QtWidgets.QLabel(self.frame_2)
        self.label_5.setGeometry(QtCore.QRect(120, 60, 120, 30))
        self.label_5.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(254, 121, 199);")
        self.label_5.setObjectName("label_5")
        self.progressBar = QtWidgets.QProgressBar(self.frame_2)
        self.progressBar.setGeometry(QtCore.QRect(120, 240, 331, 23))
        self.progressBar.setStyleSheet("QProgressBar {\n"
"    \n"
"    background-color: rgb(98, 114, 164);\n"
"    color: rgb(200, 200, 200);\n"
"    border-style: none;\n"
"    border-radius: 10px;\n"
"    text-align: center;\n"
"}\n"
"QProgressBar::chunk{\n"
"    border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.511364, x2:1, y2:0.523, stop:0 rgba(254, 121, 199, 255), stop:1 rgba(170, 85, 255, 255));\n"
"}")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setObjectName("progressBar")
        self.lineEdit = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit.setGeometry(QtCore.QRect(120, 100, 181, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(14)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("QLineEdit{\n"
"border: 2px solid rgb(37,39,48);\n"
"border-radius: 20px;\n"
"color:#FFF;\n"
"padding-left: 20px;\n"
"padding-right: 20px;\n"
"background-color:rgb(34,36,44);}\n"
"\n"
"QLineEdit:hover{\n"
"border: 2px solid rgb(48,50,62);\n"
"\n"
"}\n"
"QLineEdit:focus{\n"
"border: 2px solid rgb(85,170,255);\n"
"    background-color: rgb(43,45,56);\n"
"\n"
"}")
        self.lineEdit.setInputMethodHints(QtCore.Qt.ImhLowercaseOnly|QtCore.Qt.ImhPreferLowercase)
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_2.setGeometry(QtCore.QRect(130, 290, 172, 41))
        self.pushButton_2.setStyleSheet("QPushButton{\n"
"    color: rgb(7, 20, 52);\n"
"/*color:rgb(255, 255, 255)*/;\n"
"    \n"
"\n"
"background-color: rgb(255, 255, 255)/*rgb(231, 231, 231)*/;\n"
"}\n"
"\n"
"QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_2.setIcon(icon)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.insight_generate_clicked)
        self.pushButton_16 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_16.setGeometry(QtCore.QRect(120, 200, 75, 23))
        self.pushButton_16.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_16.clicked.connect(self.insight_clicked)
        self.pushButton_16.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_17 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_17.setGeometry(QtCore.QRect(300, 200, 75, 23))
        self.pushButton_17.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_17.clicked.connect(self.exit_clicked)
        self.pushButton_17.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(255, 85, 127);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    background-color: rgb(255, 85, 127);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_17.setObjectName("pushButton_17")
        self.pushButton_18 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_18.setGeometry(QtCore.QRect(210, 200, 75, 23))
        self.pushButton_18.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_18.clicked.connect(self.clear_insight)
        self.pushButton_18.setStyleSheet("QPushButton{\n"
"border: 2px solid rgb(85, 85, 255);\n"
"color: rgb(85, 170, 255);\n"
"    \n"
"border-radius:4px;\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"border: 2px solid rgb(255, 85, 127);\n"
"color: rgb(85, 85, 200);\n"
"    \n"
"border-radius:4px;\n"
"}`\n"
"QPlainTextEdit:hover {\n"
"  border: 1px solid #148CD2;\n"
"  color: #F0F0F0;\n"
"}\n"
"\n"
"QPusht:focus {\n"
"  border: 1px solid #1464A0;\n"
"}\n"
"\n"
"QPlainTextEdit:selected {\n"
"  background: #1464A0;\n"
"  color: #32414B;\n"
"}\n"
"")
        self.pushButton_18.setObjectName("pushButton_18")
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        self.label_6.setGeometry(QtCore.QRect(530, 60, 191, 30))
        self.label_6.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(18)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: rgb(85, 85, 255);")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setGeometry(QtCore.QRect(580, 110, 71, 30))
        self.label_7.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(18)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color: rgb(254, 121, 199);")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.frame_2)
        self.label_8.setGeometry(QtCore.QRect(500, 160, 207, 200))
        self.label_8.setMaximumSize(QtCore.QSize(16777215, 200))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(18)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: rgb(85, 85, 255);")
        self.label_8.setText("")
        self.label_8.setPixmap(QtGui.QPixmap("Assestnew/iconfinder_Twitter_UI-02_2310199.png"))
        self.label_8.setObjectName("label_8")
        self.tabWidget.addTab(self.tab_2, "")
        self.stackedWidget = QtWidgets.QStackedWidget(main_ui)
        self.stackedWidget.setGeometry(QtCore.QRect(-30, 0, 831, 241))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(26, -8, 911, 251))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("Assestnew/L D A S/1.jpg"))
        self.label.setObjectName("label")
#         self.btn_minimize = QtWidgets.QPushButton(self.page)
#         self.btn_minimize.setGeometry(QtCore.QRect(780, 20, 16, 16))
#         self.btn_minimize.setMinimumSize(QtCore.QSize(16, 16))
#         self.btn_minimize.setMaximumSize(QtCore.QSize(17, 17))
#         self.btn_minimize.setStyleSheet("QPushButton {\n"
# "    border: none;\n"
# "    border-radius: 8px;    \n"
# "    background-color: rgb(85, 255, 127);\n"
# "}\n"
# "QPushButton:hover {    \n"
# "    background-color: rgba(85, 255, 127, 150);\n"
# "}")
#         self.btn_minimize.setText("")
#         self.btn_minimize.setObjectName("btn_minimize")
#         self.btn_minimize.clicked.connect(self.minimize)
#         self.btn_close = QtWidgets.QPushButton(self.page)
#         self.btn_close.setGeometry(QtCore.QRect(804, 20, 16, 16))
#         self.btn_close.setMinimumSize(QtCore.QSize(16, 16))
#         self.btn_close.setMaximumSize(QtCore.QSize(17, 17))
#         self.btn_close.clicked.connect(self.exit_clicked)
#         self.btn_close.setStyleSheet("QPushButton {\n"
# "    border: none;\n"
# "    border-radius: 8px;        \n"
# "    background-color: rgb(255, 0, 0);\n"
# "}\n"
# "QPushButton:hover {        \n"
# "    background-color: rgba(255, 0, 0, 150);\n"
# "}")
#         self.btn_close.setText("")
#         self.btn_close.setObjectName("btn_close")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2") 
#         self.btn_close_2 = QtWidgets.QPushButton(self.page_2)
#         self.btn_close_2.setGeometry(QtCore.QRect(804, 20, 16, 16))
#         self.btn_close_2.setMinimumSize(QtCore.QSize(16, 16))
#         self.btn_close_2.setMaximumSize(QtCore.QSize(17, 17))
#         self.btn_close_2.clicked.connect(self.exit_clicked)
#         self.btn_close_2.setStyleSheet("QPushButton {\n"
# "    border: none;\n"
# "    border-radius: 8px;        \n"
# "    background-color: rgb(255, 0, 0);\n"
# "}\n"
# "QPushButton:hover {        \n"
# "    background-color: rgba(255, 0, 0, 150);\n"
# "}")
#         self.btn_close_2.setText("")
#         self.btn_close_2.setObjectName("btn_close_2")
#         self.btn_minimize_2 = QtWidgets.QPushButton(self.page_2)
#         self.btn_minimize_2.clicked.connect(self.minimize)
#         self.btn_minimize_2.setGeometry(QtCore.QRect(780, 20, 16, 16))
#         self.btn_minimize_2.setMinimumSize(QtCore.QSize(16, 16))
#         self.btn_minimize_2.setMaximumSize(QtCore.QSize(17, 17))
#         self.btn_minimize_2.setStyleSheet("QPushButton {\n"
# "    border: none;\n"
# "    border-radius: 8px;    \n"
# "    background-color: rgb(85, 255, 127);\n"
# "}\n"
# "QPushButton:hover {    \n"
# "    background-color: rgba(85, 255, 127, 150);\n"
# "}")
#         self.btn_minimize_2.setText("")
#         self.btn_minimize_2.setObjectName("btn_minimize_2")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(6, -8, 831, 251))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("Assestnew/L D A S/2.jpg"))
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.label_4 = QtWidgets.QLabel(self.page_3)
        self.label_4.setGeometry(QtCore.QRect(26, -8, 811, 251))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("Assestnew/L D A S/3.jpg"))
        self.label_4.setObjectName("label_4")
        self.stackedWidget.addWidget(self.page_3)
#         self.btn_minimize_3 = QtWidgets.QPushButton(self.page_3)
#         self.btn_minimize_3.clicked.connect(self.minimize)
#         self.btn_minimize_3.setGeometry(QtCore.QRect(780, 20, 16, 16))
#         self.btn_minimize_3.setMinimumSize(QtCore.QSize(16, 16))
#         self.btn_minimize_3.setMaximumSize(QtCore.QSize(17, 17))
#         self.btn_minimize_3.setStyleSheet("QPushButton {\n"
# "    border: none;\n"
# "    border-radius: 8px;    \n"
# "    background-color: rgb(85, 255, 127);\n"
# "}\n"
# "QPushButton:hover {    \n"
# "    background-color: rgba(85, 255, 127, 150);\n"
# "}")
#         self.btn_minimize_3.setText("")
#         self.btn_minimize_3.setObjectName("btn_minimize_3")
#         self.btn_close_3 = QtWidgets.QPushButton(self.page)
#         self.btn_close_3.setGeometry(QtCore.QRect(804, 20, 16, 16))
#         self.btn_close_3.setMinimumSize(QtCore.QSize(16, 16))
#         self.btn_close_3.setMaximumSize(QtCore.QSize(17, 17))
#         self.btn_close_3.clicked.connect(self.exit_clicked)
#         self.btn_close_3.setStyleSheet("QPushButton {\n"
# "    border: none;\n"
# "    border-radius: 8px;        \n"
# "    background-color: rgb(255, 0, 0);\n"
# "}\n"
# "QPushButton:hover {        \n"
# "    background-color: rgba(255, 0, 0, 150);\n"
# "}")
#         self.btn_close_3.setText("")
#         self.btn_close_3.setObjectName("btn_close_3")

        self.retranslateUi(main_ui)
        self.tabWidget.setCurrentIndex(0)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(main_ui)
        main_ui.setTabOrder(self.tabWidget, self.plainTextEdit)
        main_ui.setTabOrder(self.plainTextEdit, self.plainTextEdit_3)
        main_ui.setTabOrder(self.plainTextEdit_3, self.pushButton_8)

    def retranslateUi(self, main_ui):
        _translate = QtCore.QCoreApplication.translate
        main_ui.setWindowTitle(_translate("main_ui", "Dashboard"))  #Change Main window Name
        self.tabWidget.setStatusTip(_translate("main_ui", "Language Detector"))
        self.label_9.setText(_translate("main_ui", "University Project by"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_7), _translate("main_ui", "About"))
        self.plainTextEdit_3.setPlaceholderText(_translate("main_ui", "Waiting for text..."))
        self.pushButton_8.setText(_translate("main_ui", "Detect"))
        self.lineEditResult.setPlaceholderText(_translate("main_ui", "Detected Language & Code is:"))
        self.pushButton_10.setText(_translate("main_ui", "Cancel"))
        self.pushButton_11.setText(_translate("main_ui", "Clear"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("main_ui", "Language Detector"))
        self.plainTextEdit.setPlaceholderText(_translate("main_ui", "Write for analysis..."))
        self.pushButton_12.setText(_translate("main_ui", "Clear"))
        self.pushButton_13.setText(_translate("main_ui", "Cancel"))
        self.pushButton_9.setText(_translate("main_ui", "Analyze"))
        self.textBrowser.setHtml(_translate("main_ui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.textBrowser.setPlaceholderText(_translate("main_ui", "Tone Analysis:"))
        self.pushButton.setText(_translate("main_ui", "Generate Reports"))
        self.pushButton_14.setText(_translate("main_ui", "Browse.."))
        self.pushButton_15.setText(_translate("main_ui", "Start Audio"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("main_ui", "Tone Analyzer"))
        self.label_5.setText(_translate("main_ui", "Enter handle"))
        self.lineEdit.setPlaceholderText(_translate("main_ui", "@twitterhandle"))
        self.pushButton_2.setText(_translate("main_ui", "Generate Reports"))
        self.pushButton_16.setText(_translate("main_ui", "Get Insight"))
        self.pushButton_17.setText(_translate("main_ui", "Cancel"))
        self.pushButton_18.setText(_translate("main_ui", "Clear"))
        self.label_6.setText(_translate("main_ui", "Personal Insight"))
        self.label_7.setText(_translate("main_ui", " with"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("main_ui", "Personal Insight"))
        # self.btn_minimize_2.setToolTip(_translate("main_ui", "Maximize"))
        # self.btn_close_2.setToolTip(_translate("main_ui", "Close"))
        # self.btn_minimize_2.setToolTip(_translate("main_ui", "Maximize"))
        # self.btn_close_2.setToolTip(_translate("main_ui", "Close"))
        # self.btn_minimize_2.setToolTip(_translate("main_ui", "Maximize"))
        # self.btn_close_2.setToolTip(_translate("main_ui", "Close"))

    def detect_clicked(self):
        self.stackedWidget.setCurrentIndex(2)
        plain_textval = self.plainTextEdit_3.toPlainText()

        classifier = textcat.TextCat()

        distances = classifier.lang_dists(plain_textval)
        # #print(input_text)    
        ans = classifier.guess_language(plain_textval)
        language = lang_identifier(plain_textval)

        txt =  '(ISO639-3) Code: ' + language
        res = " ".join(line.get(ele, ele) for ele in txt.split())
        # print("Detected Language: ",gs.get_languages()[lan_id], res)
        print(res,ans)
        resu = res + " "+ans
        return self.lineEditResult.setText(resu)


    def analyze_clicked(self):
        self.stackedWidget.setCurrentIndex(3)
        plain_textval = self.plainTextEdit.toPlainText()
        language = lang_identifier(plain_textval)

        

        model = language + '-en'


        if language == 'en':
            tone = tone_analyzer(plain_textval)
            tone = str(tone)
            print(tone)
            if len(tone) <= 2 :
                self.textBrowser.setText('Text is too short to Analyse')
                self.progressBar_2.setValue(100)
            else:
                if type(tone) == "<class 'list'>":
                    tone = listToString(tone)
                    self.textBrowser.setText(tone)
                    self.progressBar_2.setValue(100)
                else:
                    self.progressBar_2.setValue(100)
                    self.textBrowser.setText(tone)


            # print("Tone Analysis is:", tone)
            # self.textBrowser.setText(tone)
            
        else:
            translation = lang_translator(plain_textval,model)

            tone = tone_analyzer(translation)
            print(type(tone))
            tone = str(tone)
            print(type(tone))
            if tone == '[]' or ' ':
                self.progressBar_2.setValue(100)
                self.textBrowser.setText('Text is too short to Analyse')
            else:
                if type(tone) == "<class 'list'>":
                    tone = listToString(tone)
                    self.progressBar_2.setValue(100)
                    self.textBrowser.setText(tone)



    def insight_clicked(self):

        tw_handle = self.lineEdit.text()
        print(tw_handle)  # Twitter Handle of Subject

        r_file = open("Main.r", "r")
        list_of_lines = r_file.readlines()
        list_of_lines[26] = "user_id <- '"+ tw_handle +"' \n"

        r_file = open("Main.r", "w")
        r_file.writelines(list_of_lines)
        r_file.close()
        self.progressBar.setValue(7)

        ## run r markdown file
        command = "R -e "+ '"rmarkdown::render('+"'new_r.Rmd'"+",output_file='"+"output.html'"+')"'
        self.progressBar.setValue(19)
        time.sleep(1)

        self.progressBar.setValue(37)
        time.sleep(1)

        self.progressBar.setValue(42)
        time.sleep(1)


        os.system(command)
        self.progressBar.setValue(91)
        time.sleep(1)
        self.progressBar.setValue(100)



    def insight_generate_clicked(self):
        file_path = "G:/output.html"
        
        print("Generating....")
        
        #Generate Report
        try:
                os.system("python -m webbrowser -t "+'"file:///'+file_path+'"')
        except:
                os.system("python -m webbrowser -t "+'"file:///'+'output.html'+'"')

        # webbrowser.open('file://' + os.path.realpath(file_path))
        print("Generation Completed")


    def clear_clicked(self):
        self.stackedWidget.setCurrentIndex(2)
        self.plainTextEdit_3.clear()
        self.lineEditResult.clear()

    def clear_clicked2(self):
        self.stackedWidget.setCurrentIndex(1)
        self.plainTextEdit.clear()
        self.textBrowser.clear()
        self.progressBar_2.setValue(0)

    def clear_insight(self):
        self.lineEdit.clear()
        self.progressBar.setValue(0)


    def exit_clicked(self):
        # app = QtWidgets.QApplication(sys.argv)
        # ex = Ui_main_ui()
        # w = QtWidgets.QMainWindow()
        # ex.setupUi(w)
        # w.show()
        # sys.exit(app.exec_())
        w.close()

    def minimize(self):
        w.showMinimized()

    def openFileNameDialog(self):           
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(w,"QFileDialog.getOpenFileName()", "~/Documents/","All Files (*);; files (*.txt *.csv)", options=options)
        if fileName:
            print(fileName)
    
        return fileName
    
        
        
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ex = Ui_main_ui()
    w = QtWidgets.QMainWindow()
    ex.setupUi(w)
    w.show()
    sys.exit(app.exec_())

